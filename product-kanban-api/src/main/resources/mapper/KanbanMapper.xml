<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.productkanbanapi.mapper.KanbanMapper">

    <resultMap id="BaseResultMap" type="com.example.productkanbanapi.entity.NotInStorage">
        <result property="partNumber" column="PartNumber" jdbcType="VARCHAR"/>
        <result property="batch" column="Batch" jdbcType="VARCHAR"/>
        <result property="uid" column="UID" jdbcType="VARCHAR"/>
        <result property="quantity" column="Quantity" jdbcType="FLOAT"/>
        <result property="storageLoc" column="ToStock" jdbcType="VARCHAR"/>
        <result property="state" column="Status" jdbcType="VARCHAR"/>
        <result property="wo" column="PO_NUMBER" jdbcType="VARCHAR"/>
        <result property="recTime" column="TransactionTime" jdbcType="TIMESTAMP"/>
        <result property="plant" column="Plant" jdbcType="VARCHAR"/>
    </resultMap>

    <resultMap id="StorageMap" type="com.example.productkanbanapi.entity.StorageReport">
        <result property="partNumber" column="partnumber" jdbcType="VARCHAR"/>
        <result property="wo" column="PO_NUMBER" jdbcType="VARCHAR"/>
        <result property="po" column="po" jdbcType="VARCHAR"/>
        <result property="batch" column="batch" jdbcType="VARCHAR"/>
        <result property="wo" column="wo" jdbcType="VARCHAR"/>
        <result property="uid" column="uid" jdbcType="VARCHAR"/>
        <result property="quantity" column="quantity" jdbcType="FLOAT"/>
        <result property="storageLoc" column="stock" jdbcType="VARCHAR"/>
        <result property="state" column="state" jdbcType="VARCHAR"/>
        <result property="recTime" column="rec_time" jdbcType="TIMESTAMP"/>
        <result property="plant" column="plant" jdbcType="VARCHAR"/>
        <result property="createUser" column="create_user" jdbcType="VARCHAR"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <resultMap id="RecMap" type="com.example.productkanbanapi.entity.RecReport">
        <result property="partNumber" column="PartNumber" jdbcType="VARCHAR"/>
        <result property="batch" column="Batch" jdbcType="VARCHAR"/>
        <result property="wo" column="PO_NUMBER" jdbcType="VARCHAR"/>
        <result property="uid" column="UID" jdbcType="VARCHAR"/>
        <result property="quantity" column="Quantity" jdbcType="FLOAT"/>
        <result property="fromStock" column="FromStock" jdbcType="VARCHAR"/>
        <result property="toStock" column="ToStock" jdbcType="VARCHAR"/>
        <result property="plant" column="Plant" jdbcType="VARCHAR"/>
        <result property="transactionUser" column="TransactionUser" jdbcType="VARCHAR"/>
        <result property="transactionTime" column="TransactionTime" jdbcType="TIMESTAMP"/>
        <result property="transactionType" column="TransactionType" jdbcType="VARCHAR"/>
        <result property="refDocNo" column="RefDocNo" jdbcType="VARCHAR"/>
        <result property="docHeader" column="DocHeader" jdbcType="VARCHAR"/>
    </resultMap>

    <resultMap id="ShipmentMap" type="com.example.productkanbanapi.entity.Shipment">
        <result property="shipmentDate" column="shipment_date" jdbcType="TIMESTAMP"/>
        <result property="loadingTime" column="loading_time" jdbcType="TIMESTAMP"/>
        <result property="shipmentCar" column="shipment_car" jdbcType="VARCHAR"/>
        <result property="licenseNumber" column="car_no" jdbcType="VARCHAR"/>
        <result property="shipmentNo" column="shipment_number" jdbcType="VARCHAR"/>
        <result property="toNo" column="to_no" jdbcType="VARCHAR"/>
        <result property="state" column="state" jdbcType="VARCHAR"/>
        <result property="toQty" column="to_quantity" jdbcType="FLOAT"/>
        <result property="shipmentQty" column="shipment_quantity" jdbcType="FLOAT"/>
        <result property="palletQty" column="pallet_quantity" jdbcType="FLOAT"/>
        <result property="boxQty" column="box_quantity" jdbcType="FLOAT"/>
        <result property="clientCode" column="client_code" jdbcType="VARCHAR"/>
    </resultMap>

    <!-- ew.customSqlSegment -> 条件构造器拼接语句（一定要加，否则会出现变量设置问题） -->
    <!-- 字段不能加 []，mybatis plus 不能识别 [] -->
    <select id="findNotInStock" resultMap="BaseResultMap">
        select PartNumber,
               PO_NUMBER,
               Batch,
               UID,
               Quantity,
               ToStock,
               TransactionTime,
               Plant,
               (case
                    when TransactionReason = '100' and RecordStatus = '999' then '转运中（已上架）'
                    when TransactionReason = '999' and RecordStatus = '999' then '转运中（未过账）'
                    when TransactionReason = '99' and RecordStatus = '2' then '待上架'
                   end)                                          as Status
        from xTend_MaterialTransactions
        ${ew.customSqlSegment}
    </select>

    <select id="findAllNotInStock" resultMap="BaseResultMap">
        select * from (select PartNumber,
               PO_NUMBER,
               Batch,
               UID,
               Quantity,
               ToStock,
               TransactionTime,
               Plant,
               (case
                    when TransactionReason = '100' and RecordStatus = '999' then N'转运中（已上架）'
                    when TransactionReason = '999' and RecordStatus = '999' then N'转运中（未过账）'
                    when TransactionReason = '99' and RecordStatus = '2' then N'待上架'
                   end) as Status
        from xTend_MaterialTransactions
        where (RecordStatus = '999' and (TransactionReason = '99' or (TransactionReason = '100'))
            or (TransactionReason = '99' and (RecordStatus = '2')))
          and UID LIKE 'FG%'
          and TransactionType = '315'
          <if test="startDate != null and endDate != null">
              and convert(varchar(20), TransactionTime, 21) &gt;= #{startDate}
              and convert(varchar(20), TransactionTime, 21) &lt;= #{endDate}
          </if>
          <if test="startDate == null or endDate == null">
              and convert(varchar(20), TransactionTime, 21) >= '2024-01-01 00:00:00.000'
          </if>
        union
        select PartNumber,
               PO_NUMBER,
               Batch,
               UID,
               Quantity,
               ''           as ToStock,
               null         as TransactionTime,
               Plant,
               Status
        from FG_313NotRec) t
        order by PartNumber
    </select>

    <select id="findNotInStockU" resultMap="BaseResultMap">
        select * from (select PartNumber,
               PO_NUMBER,
               Batch,
               UID,
               Quantity,
               ToStock,
               TransactionTime,
               Plant,
               (case
                    when TransactionReason = '100' and RecordStatus = '999' then N'转运中（已上架）'
                    when TransactionReason = '999' and RecordStatus = '999' then N'转运中（未过账）'
                    when TransactionReason = '99' and RecordStatus = '2' then N'待上架'
                   end) as Status
        from xTend_MaterialTransactions
        where (RecordStatus = '999' and (TransactionReason = '99' or (TransactionReason = '100'))
            or (TransactionReason = '99' and (RecordStatus = '2')))
          and UID LIKE 'FG%'
          and TransactionType = '315'
          <if test="startDate != null and endDate != null">
              and convert(varchar(20), TransactionTime, 21) &gt;= #{startDate}
              and convert(varchar(20), TransactionTime, 21) &lt;= #{endDate}
          </if>
          <if test="startDate == null or endDate == null">
              and convert(varchar(20), TransactionTime, 21) >= '2024-01-01 00:00:00.000'
          </if>
        union
        select PartNumber,
               PO_NUMBER,
               Batch,
               UID,
               Quantity,
               ''           as ToStock,
               null         as TransactionTime,
               Plant,
               Status
        from FG_313NotRec) t
        <if test="pns != null and pns.size > 0">
            where PartNumber in
            <foreach item="item" collection="pns" open="(" separator="," close=")" >
                #{item}
            </foreach>
        </if>
        order by PartNumber
    </select>

    <select id="findPdsInfoFrom3DaysAgo" resultMap="BaseResultMap">
        select distinct pn                                                 as PartNumber,
                        wo                                                 as PO_NUMBER,
                        batch                                              as Batch,
                        uid                                                as UID,
                        uid_no                                             as Quantity,
                        plant,
                        '转运中（未收货）'                                    as Status
        from fg_checklist
        ${ew.customSqlSegment}
    </select>

    <select id="findWarehousedUid" resultType="java.lang.String">
        select distinct uid
        from (select uid
              from fg_inventory fi
              union
              select uid
              from fg_inventory_out fio) warehoused
        ${ew.customSqlSegment}
    </select>

    <select id="findInStock" resultMap="StorageMap">
        select partnumber,
               po,
               batch,
               wo,
               uid,
               quantity,
               stock,
               (case when status = 0 then '已预留' when status = 1 then '在库（未预留）' end) as state,
               rec_time,
               plant,
               create_user,
               create_time
        from fg_inventory
        ${ew.customSqlSegment}
    </select>

    <select id="findRec" resultMap="RecMap">
        select Batch,
               PartNumber,
               PO_NUMBER,
               UID,
               Quantity,
               FromStock,
               ToStock,
               TransactionUser,
               TransactionTime,
               TransactionType,
               RefDocNo,
               DocHeader,
               Plant
        from xTend_MaterialTransactions
        ${ew.customSqlSegment}
    </select>

    <select id="findShipment" resultMap="ShipmentMap">
        select distinct shipment_date,
                        careta                                                                               as loading_time,
                        shipment_car,
                        car_no,
                        shipment_number,
                        to_no,
                        client_code,
                        (case
                             when tos1.status = 0 then '待拣货'
                             when tos1.status = 1 then '备货中'
                             when tos1.status = 2 and tos1.stock is not null and tos1.is_loading_truck = '待装车' then '待装车'
                             when tos1.status = 2 and tos1.stock is null then '待绑定出货区'
                             when tos1.status = 3 then '欠货'
                            end)                                                                             as state,
                        (case when ship1.client_code = 'CK00' then tos1.quantity / 4 else tos1.quantity end) as to_quantity,
                        (select sum(ship3.quantity)
                         from fg_shipmentinfo ship3
                         where ship3.shipment_number = ship1.shipment_number
                           and ship1.status = 1
                           and (last_comfirm = '货仓' or last_comfirm = '船务')
                         group by ship3.shipment_number)                                                     as shipment_quantity,
                        (select round((select sum(ship3.boxcount)
                                       from fg_shipmentinfo ship3
                                       where ship3.shipment_number = ship1.shipment_number
                                         and ship1.status = 1
                                         and (last_comfirm = '货仓' or last_comfirm = '船务')
                                       group by ship3.shipment_number), 2))                                  as box_quantity,
                        (select sum(ship3.pellet_qty)
                         from fg_shipmentinfo ship3
                         where ship3.shipment_number = ship1.shipment_number
                           and ship1.status = 1
                           and (last_comfirm = '货仓' or last_comfirm = '船务')
                         group by ship3.shipment_number)                                                     as pallet_quantity
        from fg_tos tos1
                 left join fg_shipmentinfo ship1 on tos1.shipment_no = ship1.shipment_number
        ${ew.customSqlSegment}
    </select>

    <select id="findPnByShipNo" resultType="java.lang.String">
        select distinct pn
        from fg_shipmentinfo
        ${ew.customSqlSegment}
    </select>

    <select id="findTransByUid" resultType="java.lang.String">
        select UID
        from xTend_MaterialTransactions
        ${ew.customSqlSegment}
    </select>

    <delete id="delAll313NotRec">
        delete
        from FG_313NotRec
    </delete>

</mapper>
